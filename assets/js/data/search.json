[ { "title": "[Vue.js] Vue2 설치하기", "url": "/posts/vue2-%EC%84%A4%EC%B9%98/", "categories": "Vue.js", "tags": "Vue.js, Vue.js2", "date": "2022-11-10 21:12:00 +0900", "snippet": "Vue.js2 공식 홈페이지 https://kr.vuejs.org/설치 방법Vue CLI 설치npm install -g @vue/cliVue 프로젝트 생성원하는 프로젝트 명으로 vue 생성 명령어를 입력한다.vue create project-name기본 Vue로 생성하려면 여기서 Default Vue2를 선택하여 생성하면 된다.지금은 기능을 추가로 선택해 설치할 수 있는 Manually select features를 선택하겠다.기본 선택된 것들 외에 추가하고 싶은 기능을 선택하여 설치하면 된다. 이동: 방향키 ↑ ↓기능 선택: space전체 선택: a전체 반전: i설정 완료: enter생성할 Vue Project의 버전을 선택한다.ESLint + Prettier를 선택한다.Lint on save를 선택한다.In dedicated config files를 선택해 전용 설정파일을 만들도록 한다.다음 프로젝트 설정으로 저장하겠냐는 건데 n을 해준다.이렇게 뜨면 설치에 성공한 것이다." }, { "title": "[Github] 삭제된 Repository 복구", "url": "/posts/github-restoring-deleted-repository/", "categories": "Github", "tags": "Github, Repository", "date": "2022-09-20 17:02:00 +0900", "snippet": "페이지 오른쪽 상단 프로필을 클릭한 후 Settings를 클릭해 들어간다.그 후 왼쪽 메뉴에서 Repositories로 이동한다.Repositories에서 Deleted repositories를 클릭한다.그러면 삭제했던 Repository를 확인할 수 있다.복구할 Repository를 찾아서 Restore를 눌러주면 복구가 완료된다.삭제하고 바로 여기서 확인할 수 있는 것이 아니라 약 1시간 정도 지나야 확인할 수 있다.참고로 Fork한 Repository는 복구할 수 없다.만약 Fork한 Repository를 복구하고 싶을 경우 아래의 Github Support에 도움을 요청해보기를 바란다. https://support.github.com/contact?tags=docs-generic" }, { "title": "[VSCode] markdown 작성 시 줄 끝의 공백이 제거되는 현상 해결 방법", "url": "/posts/prettier-md/", "categories": "Visual Studio Code", "tags": "Visual Studio Code, Prettier, .editorconfig, Markdown", "date": "2022-09-19 20:36:00 +0900", "snippet": "VSCode로 블로그 글을 작성하려고 하였는데 저장을 하게 되면 줄 끝에 있는 공백이 제거되는 현상이 있어서, 줄 끝에 있는 공백 2칸이 없어져서 개행을 할 때 곤란했다.그래서 해결방법을 찾아보았다.Prettier 사용 중일 시 Markdown파일에 적용되지 않도록 하기Prettier는 정해진 규칙에 따라 자동으로 코드를 정리해주는 VSCode 확장 프로그램이다.이 프로그램을 사용하고 있다면 Markdown 파일이 있는 폴더 또는 루트 폴더에 .prettierignore 파일을 만든다.그 후 아래처럼 작성한다.*.md이렇게 하면 해당폴더와 하위 폴더의 Markdown 파일은 전부 Prettier 기능이 적용되지 않게 된다..editorconfig 파일 수정하기editorconfig 파일도 Prettier와 비슷하게 자동으로 코드를 정리해주는 설정 파일이다.이 파일에서 trim_trailing_whitespace 라고 적힌 줄을 찾아 값을 false로 바꾼다.trim_trailing_whitespace는 줄 끝의 공백 제거 여부를 나타낸다. 그래서 false로 설정하면 작동하지 않게 된다.ediforconfig의 Properties에 대한 자세한 설명을 보고싶은 경우 아래의 링크로 가자. https://github.com/editorconfig/editorconfig/wiki/EditorConfig-PropertiesVSCode의 텍스트 편집기 설정 수정하기VSCode의 설정에서 텍스트 편집기의 Trim Trailing Whitespace의 체크를 해제한다.이것도 마찬가지로 줄 끝의 공백 제거 여부를 나타내는 것이기 때문에 체크를 해제해야 한다.이렇게 설정하면 저장을 했을 때 줄 끝의 공백이 없어지는 현상을 해결할 수 있다." }, { "title": "[Git] subtree로 Commit과 같이 Repository 합치기", "url": "/posts/git-subtree/", "categories": "Git", "tags": "Github, Git, subtree", "date": "2022-09-19 19:57:00 +0900", "snippet": "프로그래밍을 하면서 배웠던 걸 전부 Repository를 만들어 push 하다보니 Repository가 너무 많아졌다.그래서 한 곳으로 모으는 정리를 하고 싶었다.그런데 Repository의 파일들을 그냥 clone해서 새 Repository에 넣을 경우 이전에 했던 commit들이 다 사라져서 열심히 심어놓은 잔디도 없어진다.그래서 commit 내역도 같이 합칠 수 있는 것을 찾아보니 git subtree를 사용하면 가능하다고 하여 사용해 보기로 하였다.새로운 Repository 만들기Repository를 한 곳에 모아야 하니 Github에서 새로운 Repository를 만들어 준다.그리고 clone을 해준다.$ git clone (복사할 Repository)그 후 commit을 한 번 해준다. 방금 만든 Repository라 commit 내역이 하나도 없는데 commit을 하지 않으면 후에 subtree를 할 때 에러가 난다.간단하게 readme 파일 만들고 commit 하자.clone한 폴더에 readme.md 파일을 만든다.commit 한다.$ git add .$ git commit -m \"설명\"subtree로 Repository 병합하기$ git subtree add --prefix=(합칠 Repository의 파일들을 담을 폴더명) (합칠 Repository 주소) (합칠 Repository Branch)push를 한 후 Github에서 Repository를 확인해보면 commit 내역과 Repository가 잘 합쳐진 것을 볼 수 있다.합친 후 기존 Repository는 다 삭제해주었다." }, { "title": "[github 블로그 만들기] 4 - Google Analytics를 사용하여 Page View 구현하기", "url": "/posts/making-github-blog-4/", "categories": "Github Blog", "tags": "Github, Google Analytics, Google Cloud, Page View, Google Analytics superProxy", "date": "2022-09-16 15:17:00 +0900", "snippet": "Google Analytics 설정Google Analytics 계정 및 속성 만들기아래의 Google Analytics 홈페이지로 이동하여 측정 시작을 클릭한다. Google Analytics : https://analytics.google.com/계정 설정, 속성 설정, 비즈니스 정보를 입력하고 만들기 버튼을 누른다.속성을 설정할 때 고급 옵션에서 유니버설 애널리틱스 속성 만들기를 체크하여 자신의 블로그 링크를 넣고 Google 애널리틱스 4 속성과 유니버설 애널리틱스 속성 둘 다 만들기와 Google 애널리틱스 4 속성에 대해 향상된 측정 사용 설정을 체크한다.왼쪽 위의 모든 계정 &gt; @@@ 이라고 적힌 탭을 눌러보면 아래의 창이 나타난다.만약 속성 이름을 blog로 했다면 저 사진에 있는 것 처럼 blog 와 blog-GA4 두 개가 생성된다.그냥 blog는 유니버설 애널리틱스(UA) 속성이고 GA4가 써진 blog 속성이 구글 애널리틱스4(GA4) 속성이다.GA4 속성을 선택하여 관리 &gt; 데이터 스트림으로 이동하면 생성되어 있는 스트림을 확인할 수 있다.스트림을 클릭하면 웹 스트림 세부정보 창이 뜨는데 여기서 스트림 세부정보의 측정 ID를 복사한다._config.yml 파일에서 google_analytics의 id란에 복사한 측정 ID를 입력한다.이렇게 하여 github에 push하면 실시간으로 트래픽을 모니터링할 수 있다.Page Views 설정아래의 Google Cloud 홈페이지로 이동하여 애플리케이션 만들기를 클릭 한다. Google Cloud : https://console.cloud.google.com/appengine위치를 설정한다.나는 한국에 있기 때문에 asia-northeast3로 위치를 설정하였다.리소스의 Language를 Python으로 선택하고 Environment를 표준으로 선택한다.왼쪽 상단 메뉴 버튼을 눌러서 API 및 서비스 이동 탭의 사용 설정된 API 및 서비스로 이동한다.왼쪽에서 OAuth 동의 화면을 클릭한다.블로그가 공개적으로 호스팅 될거니 외부를 선택하여 만들기 버튼을 클릭한다.OAuth 동의 화면에서 앱 이름, 사용자 지원 이메일, 개발자 연락처 정보를 입력한다.왼쪽의 API 및 서비스에서 사용자 인증 정보로 이동해 사용자 인증 정보 만들기의 OAuth 클라이언트 ID를 클릭한다.애플리케이션 유형은 웹 애플리케이션을 선택한다.이름도 입력해준다.승인된 리디렉션 URI에는 아래의 형식으로 입력한다. https://&lt;project-id&gt;.&lt;region&gt;.r.appspot.com/admin/authproject-id는 상단의 프로젝트 타이틀을 클릭하면 ID 컬럼에 적혀있다.region은 어디서 확인 하는지 찾지 못했다.나는 앞에서 애플리케이션을 만들 때 설정한 위치를 입력하는 거라고 생각했는데 안 되어서 시간을 날렸다.이 URI는 superProxy에서 로그인을 한 후에 이동되는 경로이다. 실제로 로그인을 했을 때 region 부분에 du라고 적힌 경로로 이동을 한 것을 보고 일단은 du로 작성하였다.혹시 아시는 분은 댓글로 알려주시면 감사하겠습니다. 예시: https://civil-sprite-123456.du.r.appspot.com/admin/auth이렇게 해서 만들면 클라이언트 ID와 클라이언트 보안 비밀번호를 알려주는 창이 나온다.이 번호들은 방금 만든 클라이언트 ID를 클릭하면 다시 확인할 수 있다.클라이언트 ID와 클라이언트 보안 비밀번호를 복사한다.아래의 링크로 들어가 플랫폼용 클라우드 SDK를 설치한다. https://cloud.google.com/sdk/docs/quickstartGoogle Cloud CLI 설치 프로그램을 다운로드해서 설치한다.Google Cloud SDK shell을 실행하여 다음 명령을 실행한다.정확하게 기억이 안 나지만 대충 로그인 어쩌고 뜨고 픽업 프로젝트 나오면 아까 프로젝트 ID에 해당하는 것을 선택해주면 된다.# gcloud init~snip~You are logged in as: [blah_blah@gmail.com].Pick cloud project to use:[1] chirpy-test-300716[2] Create a new projectPlease enter numeric choice or text value (must exactly match listitem): 1superProxy를 사용하기 위해 결제와 Google Analytics API를 설정할 것이다.왼쪽 위 메뉴 버튼을 눌러서 결제로 들어가 결제 계정을 만든다.API 및 서비스의 라이브러리를 클릭하여 API 및 서비스 검색에 Google Analytics API를 검색하여 사용 버튼을 클릭한다.Google Analytics superProxy 설정아래 깃허브 링크에 있는 프로젝트에서 Google Analytics superProxy 프로젝트를 Google Cloud CLI가 깔린 폴더 안에 있는 google-cloud-sdk에 붙여넣기 한다. Github Link : https://github.com/googleanalytics/google-analytics-super-proxy나의 경우에는 아래 경로에 있었다. C:\\Users\\사용자이름\\AppData\\Local\\Google\\Cloud SDK\\google-cloud-sdkgoogle-cloud-sdk의 src/app.yaml파일 에서 첫 두 줄을 제거한다.- application: your-project-id- version: 1src/config.py파일에 AUTH_CONFIG와 XSRF_KEY를 입력한다.OAUTH_CLIENT_ID와 OAUTH_CLIENT_SECRET는 아까 복사했던 것을 그대로 입력하면 되고 OAUTH_REDIRECT_URI는 api 및 서비스 &gt; 사용자 인증 정보 &gt; 클라이언트 ID에 입력했던 승인된 리디렉션 URI를 입력하면 된다.XSRF_KEY는 자신이 적고 싶은대로 적어주면 된다. 어렵게 적어주자.다시 Google Cloud SDK Shell을 실행하여 google-cloud-sdk/src 위치에서 아래 명령을 실행한다.# gcloud app deploydeploy해서 배포된 서비스 주소 뒤에 /admin을 붙여서 접속하면 아래와 같은 페이지가 나온다.주소는 콘솔에서 target url이라고 출력된 란에 있다.Authorize Access 버튼을 눌러 자신을 관리자로 추가한다.Continue를 누르면 아래 화면이 나온다.Google Analytics Query 만들기위 사진의 Create Query 버튼을 누르면 아래 페이지로 이동된다.Refresh Interval는 아래 URI를 몇 초마다 실행할 것인가를 설정하는 곳이다. 초 기준으로 입력해주면 된다. 나는 5분(600)으로 설정하였다.이제 Encoded URi for the query에 들어갈 URI를 만들어보자.아래 링크에 접속하면 아래 페이지로 이동된다. Google Analytics Query Explorer : https://ga-dev-tools.web.app/ga4/query-explorer/UA Query Explorer에서 필요한 매개변수를 입력해주고 RUN QUERY 버튼을 누르면 API Request URI이 나온다.입력해야 할 매개변수는 다음과 같다. start-date : 블로그에 처음으로 포스팅 한 날짜 YYYY-MM-DD end-date : today metrics : ga:pageviews dimentions : ga:pagePathChirpy 테마 블로그에서는 필터도 설정하라고 적어놨는데 필터는 잘 모르겠다.난 적혀져 있는대로 했는데 나중에 다시 알아봐야겠다. filter : ga:pagePath=~^/posts/.*/$;ga:pagePath!@=이렇게 해서 Run Query를 클릭해 API Request URI를 Encoded URI for the query에 입력한 후 Save Query를 클릭한다.쿼리가 저장되면 이렇게 나타난다.Manage 버튼을 클릭하면 아래의 페이지가 나타난다.Enable Endpoint와 Start Scheduling을 클릭해서 활성화 시켜준다.그 후 _config.yml 파일에서 google_analytics의 proxy_endpoint에 위 화면의 Public Request Endpoint에 있는 URL을 복사 붙여넣기 한다.이렇게 하면 조회수가 활성화가 된다!이 테마를 만든 사람의 블로그에 있는 설명을 보면서 했는데 superProxy 부분에서 4일이나 걸렸다…" }, { "title": "[github 블로그 만들기] 3 - 댓글 기능 추가하기", "url": "/posts/making-github-blog-3/", "categories": "Github Blog", "tags": "Github, Comments, Giscus, Discussions", "date": "2022-09-12 02:47:00 +0900", "snippet": "댓글 플랫폼 정하기댓글 플랫폼으로는 disqus, utterances, giscus가 있다. disqus: SNS 계정을 이용하여 댓글을 달 수 있다.utterances: github의 issue 탭을 활용해서 댓글을 달 수 있다.giscus: github의 discussions 탭을 활용해서 댓글을 달 수 있다.disqus는 개발 블로그에 SNS 계정을 사용하여 댓글을 사용하는 게 마음에 들지 않았다.그리고 광고가 자동으로 붙는다는 글을 보고 사용하지 않기로 했다.utterances는 issue탭을 사용하는 것이 마음에 들지 않았고, 댓글에 필요한 대댓글이 없다고 하여 쓰고 싶지 않았다.giscus는 토론이나 커뮤니티를 위해 만들어진 discussions를 댓글로 사용하게 해주고 대댓글도 사용 가능하다. 그래서 giscus를 쓰기로 하였다.활성화 방법 댓글을 사용할 레포지토리를 public으로 전환한다. Github 계정에 giscus 앱을 설치https://github.com/apps/giscus위 링크를 들어가면 아래의 페이지가 뜬다.Install을 클릭 이 앱을 어디에 설치할 건지를 물어보고 있다.나는 특정 레포지토리에만 설치하기로 하였다.그 후 Install을 클릭하면 설치가 완료 된다. 그 후 Discussions을 사용하기 위해서, 댓글을 저장할 레포지토리의 Settings탭의 Features에서 Discussions에 체크를 해준다.giscus 댓글 커스텀하기아래 링크로 들어가면 댓글 기능을 원하는 대로 커스텀 할 수 있다. https://giscus.app/ko커스텀을 끝내고 나면 giscus 활성화에 스크립트가 있다._config.yml 파일 comments란의 giscus란에 입력해야 하는 것들을 스크립트를 확인하며 입력해준다.그러면 post 아래에 comments란이 생성되는 것을 확인할 수 있다.댓글을 남기면 이렇게 표시가 된다.이 댓글은 해당 블로그의 repository의 Discussions 탭에서 확인할 수 있다." }, { "title": "[github 블로그 만들기] 2 - 게시글 작성 명령어", "url": "/posts/making-github-blog-2/", "categories": "Github Blog", "tags": "Github, Ruby", "date": "2022-08-14 01:28:00 +0900", "snippet": "이제 블로그를 만들었으니 게시글을 작성하는 명령어를 알아보도록 하겠다.게시글 관련 명령어 사용아래의 사이트를 참고하여 작성하였다. https://github.com/jekyll/jekyll-compose처음에 명령어를 사용하기 위해서 추가적으로 설치를 해줘야 한다.루트 폴더에 Gemfile 이라는 파일이 있을 것이다. 그 파일 안에 밑에 적힌 것을 추가로 작성해주자. gem ‘jekyll-compose’, group: [:jekyll_plugins]그 후 실행을 하면 설치가 완료된다.$ bundle설치한 후 도움말을 확인하고 싶으면 아래 명령어를 입력하면 된다.$ bundle exec jekyll help명령어를 사용할 때는 꼭 아래 형식으로 사용해야 한다.$ bundle exec jekyll &lt;subcommand&gt; [options]여기서 우리가 쓸 것은 게시글을 작성하는데에 필요한 명령어 들이다.draft # 지정된 이름의 새 초안 게시물을 만든다.post # 지정된 이름의 새 게시물을 만든다.publish # 초안을 _posts 디렉토리로 이동시키고 날짜를 설정한다.unpublish # 게시물을 _drafts 디렉토리로 이동시킨다. (게시를 취소한다.)page # 지정된 이름의 새 페이지를 만든다. (사용을 안 해서 모르겠다. 찾아봐야겠다.)rename # 게시물의 이름과 제목을 변경한다.compose # 지정된 이름의 새 파일을 만든다.post새 게시물을 만들 수 있다.예시$ bundle exec jekyll post \"My New Post\"# or specify a custom format for the date attribute in the yaml front matter$ bundle exec jekyll post \"My New Post\" --timestamp-format \"%Y-%m-%d %H:%M:%S %z\"compose새 파일을 만든다.# or by using the compose command$ bundle exec jekyll compose \"My New Post\"# or by using the compose command with post specified$ bundle exec jekyll compose \"My New Post\" --post# or by using the compose command with the posts collection specified$ bundle exec jekyll compose \"My New Post\" --collection \"posts\"# or by using the compose command with draft specified$ bundle exec jekyll compose \"My new draft\" --draft# or by using the compose command with the drafts collection specified$ bundle exec jekyll compose \"My new draft\" --collection \"drafts\"컬렉션에 새 파일을 만든다.$ bundle exec jekyll compose \"My New Thing\" --collection \"things\"draft초안을 만든다.$ bundle exec jekyll draft \"My new draft\"rename이름을 바꾼다.게시글의 경우$ bundle exec jekyll rename _posts/2014-01-24-my-new-draft.md \"My New Post\"# or specify a specific date$ bundle exec jekyll rename _posts/2014-01-24-my-new-post.md \"My Old Post\" --date \"2012-03-04\"# or specify the current date$ bundle exec jekyll rename _posts/2012-03-04-my-old-post.md \"My New Post\" --now초안의 경우$ bundle exec jekyll rename _drafts/my-new-draft.md \"My Renamed Draft\"# or rename it back$ bundle exec jekyll rename _drafts/my-renamed-draft.md \"My new draft\"publish초안을 게시한다.$ bundle exec jekyll publish _drafts/my-new-draft.md# or specify a specific date on which to publish it$ bundle exec jekyll publish _drafts/my-new-draft.md --date 2014-01-24# or specify a custom format for the date attribute in the yaml front matter$ bundle exec jekyll publish _drafts/my-new-draft.md --timestamp-format \"%Y-%m-%d %H:%M:%S %z\"unpublish게시물 게시를 취소한다.$ bundle exec jekyll unpublish _posts/2014-01-24-my-new-draft.md기본 플러그인 구성구성을 사용자 정의하려면 jekyll_compose 를 편집하면 된다.mark다운 문법vscode 확장 프로그램 markdown" }, { "title": "[github 블로그 만들기] 1 - 테마를 사용하여 블로그 생성하기", "url": "/posts/making-github-blog-1/", "categories": "Github Blog", "tags": "Github, Ruby", "date": "2022-07-11 10:10:00 +0900", "snippet": "마음에 드는 github 블로그 테마를 선택해보자테마는 직접 만들 수도 있고 아래의 사이트에서 찾을 수도 있다. https://jamstackthemes.dev/ssg/jekyll/https://jekyllthemes.org/https://jekyllthemes.io/https://github.com/topics/jekyll/나는 github 검색창에서 jekyll-theme을 검색해서 나온 것들 중 chirpy라는 테마가 괜찮아 보여서 이 테마를 사용하기로 했다.테마 링크 https://github.com/cotes2020/jekyll-theme-chirpy이 테마의 설명 페이지 https://chirpy.cotes.page/설명 페이지의 HOME에서 Getting Started 포스팅을 읽으면 설치를 하고 어떻게 실행하면 되는지 설명이 나온다.테마를 내 리포지토리로 가져와보자잘 모르겠지만 레포지토리 url 뒤에 /generate를 붙이면 해당 레포지토리를 내 레포지토리로 가져오는 것 같다. https://github.com/cotes2020/chirpy-starter/generate그 후 자신의 레포지토리의 프로젝트를 clone 하여 받는다.Ruby 설치설치 사이트 https://www.ruby-lang.org/en/downloads/사이트에 들어가서 RubyInstaller을 누른다.빨간 Download 버튼을 누른다.WITH DEVKIT 라고 적힌 것 중 버전이 2.5.0 이상인 것을 다운한다.설치 방법은 구글에서 검색할 것.설치가 잘 됐는지 cmd에서 확인해 볼 것$ ruby -vbundle 설치gem은 node의 npm과 비슷하게 패키지를 설치할 수 있게 도와주는 툴이다.Gemfile은 bundler에서 사용하는 의존성 파일이고, bundle은 Gemfile에 정의된 gem들의 의존성을 파악해 사용할 수 있게 해준다.해당 테마 프로젝트를 Visual Studio Code를 열어서 패키지를 설치해주자.$ bundle_config.yml 설정yml파일에서 필요한 것들을 작성해주자. lang : 블로그 언어를 설정하는 곳이다. _data 폴더 안에 있는 locales 폴더에서 해당되는 언어의 파일명을 그대로 적으면 된다. 해당 파일에서 한글로 표시될 단어들을 수정할 수도 있다. timezone : 포스팅 작성 등에 사용되는 시간 설정이다. title : 블로그의 제목이다. tagline : 타이틀 밑에 들어갈 부제목이다. url : 블로그 주소를 적어준다.이 외에도 필요한 설정은 주석을 읽으면서 알아서 적어주자.내 기준으로 위의 설정들을 변경하면 이렇게 된다. lang: ko-KRtimezone: Asia/Seoultitle: Shintagline: 개발하면서 배운 것들을 올리는 블로그 입니다.url: “https://YesYourShin.github.io”로컬에서 사이트 확인하기루트 폴더에서 밑의 코드를 실행시킨다.$ bundle exec jekyll s그러고 나면 http://127.0.0.1:4000 에서 사이트를 확인이 가능하다.github에서 배포설명 페이지에서 플랫폼 목록을 업데이트해야 한다고 나와있다.$ bundle lock --add-platform x86_64-linuxgithub에 현재 프로젝트를 push한 다음 github의 리포지토리 이름을 Github_Username.github.io로 수정한다.그 다음 해당 리포지토리의 설정에서 왼쪽 메뉴의 Pages를 눌러 들어간다.거기서 Source의 Branch를 gh-pages로 변경 후 Save 버튼을 누른다.그 후 자신의 블로그 주소(Github_Username.github.io)로 가면 블로그가 만들어져 있는 것을 확인할 수 있다." } ]
